name: Build ERPNext AIO Image

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]  # 打 v* tag 会用该 tag(去掉前缀 v) 作为版本号
  workflow_dispatch:
    inputs:
      version:
        description: "版本号（如 15.77.0）。留空：tag 触发用 tag；否则自动生成 YYYY.MM.DD-<run>"
        required: false
      push_latest:
        description: "是否同时打 latest 标签"
        type: boolean
        default: false
      force_overwrite:
        description: "是否允许覆盖已有同名版本（true=允许覆盖；false=存在则失败）"
        type: boolean
        default: true

permissions:
  contents: read
  packages: write

concurrency:
  group: erpnext-aio-15-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 统一派生版本号与是否覆盖/是否latest等，再以 outputs 传下去
      - name: Derive version & tags
        id: meta
        shell: bash
        env:
          IN_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || '' }}
          IN_PUSH_LATEST: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.push_latest || 'false' }}
          IN_FORCE_OVERWRITE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force_overwrite || 'true' }}
        run: |
          set -euo pipefail

          OWNER_LC="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          IMAGE="ghcr.io/${OWNER_LC}/erpnext15-aio"

          # 版本优先级：手动输入 > tag 触发 > 自动生成
          if [[ -n "${IN_VERSION}" ]]; then
            VER="${IN_VERSION}"
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VER="${GITHUB_REF_NAME#v}"   # 去掉前缀 v
          else
            VER="$(date -u +%Y.%m.%d)-${GITHUB_RUN_NUMBER}"
          fi

          TAGS="${IMAGE}:${VER}"
          if [[ "${IN_PUSH_LATEST}" == 'true' ]]; then
            TAGS="${TAGS},${IMAGE}:latest"
          fi

          echo "image=${IMAGE}"                         >> "$GITHUB_OUTPUT"
          echo "version=${VER}"                         >> "$GITHUB_OUTPUT"
          echo "tags=${TAGS}"                           >> "$GITHUB_OUTPUT"
          echo "force_overwrite=${IN_FORCE_OVERWRITE}"  >> "$GITHUB_OUTPUT"
          echo "Computed tags: ${TAGS}"
          echo "Force overwrite: ${IN_FORCE_OVERWRITE}"

      # 只有当不允许覆盖时才做存在性检查；完全避免直接引用 inputs.*
      - name: Guard: disallow overwrite if tag exists
        if: ${{ steps.meta.outputs.force_overwrite == 'false' }}
        shell: bash
        run: |
          set -euo pipefail
          IMG="${{ steps.meta.outputs.image }}"
          VER="${{ steps.meta.outputs.version }}"
          if docker buildx imagetools inspect "${IMG}:${VER}" >/dev/null 2>&1; then
            echo "❌ 镜像标签已存在：${IMG}:${VER}"
            echo "如需覆盖，请在触发工作流时把 force_overwrite 设为 true。"
            exit 1
          else
            echo "✅ 未发现同名版本标签，继续构建。"
          fi

      - name: Build & Push (GHCR)
        uses: docker/build-push-action@v6
        with:
          context: ./erpnext15
          file: ./erpnext15/Dockerfile
          platforms: linux/amd64
          pull: true
          push: true
          # 强制覆盖=禁用缓存（触发彻底重建）；否则使用默认缓存
          no-cache: ${{ steps.meta.outputs.force_overwrite == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
          # 这些 build-args 让你可以通过 repo 的 Variables/Secrets 配置外部 MySQL/Redis 或站点名等
          build-args: |
            USE_EXTERNAL_DB=${{ vars.USE_EXTERNAL_DB || 'no' }}
            USE_EXTERNAL_REDIS=${{ vars.USE_EXTERNAL_REDIS || 'no' }}
            CREATE_SITE_AT_BUILD=${{ vars.CREATE_SITE_AT_BUILD || 'yes' }}
            DB_HOST=${{ vars.DB_HOST || '' }}
            DB_PORT=${{ vars.DB_PORT || '3306' }}
            DB_ROOT_USER=${{ vars.DB_ROOT_USER || 'root' }}
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD || '' }}
            REDIS_CACHE_URL=${{ vars.REDIS_CACHE_URL || '' }}
            REDIS_QUEUE_URL=${{ vars.REDIS_QUEUE_URL || '' }}
            REDIS_SOCKETIO_URL=${{ vars.REDIS_SOCKETIO_URL || '' }}
            SITE_NAME=${{ vars.SITE_NAME || 'site1.local' }}
            ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD || 'admin' }}
            SITE_DB_PASSWORD=${{ secrets.SITE_DB_PASSWORD || 'Pass1234' }}
            MARIADB_ROOT_PASSWORD=${{ secrets.MARIADB_ROOT_PASSWORD || 'Pass1234' }}
