name: Build ERPNext AIO Image

on:
  push:
    branches: [ "main", "master" ]
    tags:     [ "v*" ]
  workflow_dispatch:
    inputs:
      version:
        description: "镜像版本号，如 15.77.0。若填写且开启 push_git_tag，将在仓库创建/更新 git 标签 v<version>。"
        required: false
        default: ""
      push_git_tag:
        description: "当填写 version 时，是否在仓库创建并推送 v<version> 标签"
        type: boolean
        required: false
        default: true
      force_rebuild:
        description: "强制更新：忽略构建缓存（no-cache）"
        type: boolean
        required: false
        default: false
      china_mirrors:
        description: "构建时使用国内镜像 (yes/no)"
        required: false
        default: "no"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # 需要创建/推送 git tag
      packages: write     # 推送 GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive version, tags & metadata
        id: meta
        env:
          INP_VERSION: ${{ github.event.inputs.version }}
          CHINA_MIRRORS: ${{ github.event.inputs.china_mirrors }}
        run: |
          set -e
          # 1) 版本来源优先级：
          #    a) workflow_dispatch 输入 version
          #    b) 推送的 git 标签 v*
          #    c) rolling（滚动）
          VERSION="${INP_VERSION}"
          if [[ -z "$VERSION" ]]; then
            if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" == v* ]]; then
              VERSION="${GITHUB_REF_NAME#v}"
            else
              VERSION="rolling"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # 2) 镜像名（统一我们的风格）
          OWNER_LC="$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')"
          IMAGE="ghcr.io/${OWNER_LC}/erpnext15-aio"

          # 3) tags：始终推 latest；若有版本号，额外推 <version> 与 v<version>
          TAGS="${IMAGE}:latest"
          if [[ "$VERSION" != "rolling" ]]; then
            TAGS="${TAGS},${IMAGE}:${VERSION},${IMAGE}:v${VERSION}"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_ENV

          # 4) 其它元信息
          CREATED="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "CREATED=$CREATED" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          # 5) 国内镜像开关（传递给 Dockerfile）
          if [[ "${CHINA_MIRRORS}" == "yes" ]]; then
            echo "CHINA_MIRRORS=yes" >> $GITHUB_ENV
          else
            echo "CHINA_MIRRORS=no" >> $GITHUB_ENV
          fi

      - name: Create git tag v<version> (when asked)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.version != '' && inputs.push_git_tag == true }}
        uses: actions/github-script@v7
        env:
          VERSION: ${{ env.VERSION }}
        with:
          script: |
            const version = process.env.VERSION;
            const tagRef = `refs/tags/v${version}`;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/v${version}`
              });
              core.info(`Git tag v${version} 已存在，跳过创建。`);
            } catch (e) {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: tagRef,
                sha: context.sha
              });
              core.info(`已创建 git tag v${version}。`);
            }

      - name: Build and push (GHCR)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: erpnext15/aio/Dockerfile
          platforms: linux/amd64
          push: true
          no-cache: ${{ github.event_name == 'workflow_dispatch' && inputs.force_rebuild == 'true' }}
          tags: ${{ env.TAGS }}
          labels: |
            org.opencontainers.image.title=ERPNext AIO
            org.opencontainers.image.description=All-in-one ERPNext with MariaDB & Redis. Ready to run.
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ env.CREATED }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          build-args: |
            CHINA_MIRRORS=${{ env.CHINA_MIRRORS }}
            FRAPPE_BRANCH=version-15
            ERPNEXT_BRANCH=version-15
            SITE_NAME=site1.local
            ADMIN_PASSWORD=admin
            SITE_DB_PASSWORD=Pass1234
            MARIADB_ROOT_PASSWORD=Pass1234
