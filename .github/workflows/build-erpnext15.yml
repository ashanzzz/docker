name: ERPNext v15 镜像构建（含跳过/强制更新逻辑 + 友好输出/自检）

on:
  push:
    paths:
      - "erpnext15/**"
      - ".github/workflows/erpnext15-build.yml"
  workflow_dispatch:
    inputs:
      force_update:
        description: "手动触发时是否强制更新（true/false），默认 false"
        required: false
        default: "false"
      tag:
        description: "镜像TAG（缺省将用上游版本号，比如 v15.48.4）"
        required: false
      platforms:
        description: "目标平台（默认 linux/amd64,linux/arm64）"
        required: false
        default: "linux/amd64,linux/arm64"
  schedule:
    - cron: "20 3 * * *"

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/erpnext15
  FRAPPE_PATH: https://github.com/frappe/frappe
  FRAPPE_BRANCH: version-15

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: erpnext15-build
      cancel-in-progress: true

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 jq / git
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq git

      - name: 登录镜像仓库（默认 GHCR）
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查 erpnext15 目录与 app.json
        id: ckdir
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -d "erpnext15" ]]; then
            echo "::notice title=跳过构建::未检测到 erpnext15 目录。当前无 ERPNext 镜像构建输入。"
            echo "HAS_DIR=false" >> $GITHUB_OUTPUT
          else
            echo "HAS_DIR=true" >> $GITHUB_OUTPUT
            if [[ ! -f "erpnext15/app.json" ]]; then
              echo "::notice title=跳过构建::缺少 erpnext15/app.json。当前无 ERPNext 镜像构建输入。"
              echo "HAS_APP_JSON=false" >> $GITHUB_OUTPUT
            else
              echo "HAS_APP_JSON=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 若无输入则温和退出
        if: ${{ steps.ckdir.outputs.HAS_DIR == 'false' || steps.ckdir.outputs.HAS_APP_JSON == 'false' }}
        run: |
          echo "没有有效的构建输入（目录或 app.json 缺失），本次流程结束。"
          exit 0

      - name: 读取本地配置（FORCE_UPDATE / ERPNEXT_VERSION）
        id: localcfg
        shell: bash
        run: |
          set -euo pipefail
          FORCE_UPDATE="false"
          LOCAL_VERSION="unknown"

          if [[ "${{ github.event.inputs.force_update || '' }}" == "true" ]]; then
            FORCE_UPDATE="true"
          fi

          if [[ -f "erpnext15/.env.example" ]]; then
            if grep -qE '^FORCE_UPDATE=' erpnext15/.env.example; then
              if [[ "$FORCE_UPDATE" != "true" ]]; then
                FORCE_UPDATE="$(grep -E '^FORCE_UPDATE=' erpnext15/.env.example | head -n1 | cut -d= -f2 | tr -d '\r' | tr 'A-Z' 'a-z')"
                [[ -z "$FORCE_UPDATE" ]] && FORCE_UPDATE="false"
              fi
            fi
            if grep -qE '^ERPNEXT_VERSION=' erpnext15/.env.example; then
              LOCAL_VERSION="$(grep -E '^ERPNEXT_VERSION=' erpnext15/.env.example | head -n1 | cut -d= -f2 | tr -d '\r')"
              [[ -z "$LOCAL_VERSION" ]] && LOCAL_VERSION="unknown"
            fi
          fi

          echo "FORCE_UPDATE=$FORCE_UPDATE" | tee -a $GITHUB_OUTPUT
          echo "LOCAL_VERSION=$LOCAL_VERSION" | tee -a $GITHUB_OUTPUT

      - name: 获取上游 ERPNext v15 最新版本号（多重兜底）
        id: upstream
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          UPSTREAM_REPO="frappe/erpnext"
          REMOTE_TAG=""
          echo "== 尝试 GitHub API 拉取 v15.* tags =="
          RESPONSE="$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/repos/${UPSTREAM_REPO}/tags?per_page=200" || true)"
          if [[ -n "$RESPONSE" ]]; then
            REMOTE_TAG="$(echo "$RESPONSE" | jq -r '.[].name' | grep -E '^v15\.' | sort -V | tail -n1 || true)"
          fi
          if [[ -z "$REMOTE_TAG" ]]; then
            echo "== 兜底：git ls-remote --tags =="
            REMOTE_TAG="$(git ls-remote --tags https://github.com/${UPSTREAM_REPO}.git | \
              awk '{print $2}' | sed 's#refs/tags/##' | sed 's/\^{}//' | grep -E '^v15\.' | sort -V | tail -n1 || true)"
          fi
          if [[ -z "$REMOTE_TAG" ]]; then
            echo "== 兜底2：取 version-15 分支最新 SHA =="
            REMOTE_SHA="$(git ls-remote https://github.com/${UPSTREAM_REPO}.git refs/heads/version-15 | awk '{print $1}' | head -n1 || true)"
            if [[ -n "$REMOTE_SHA" ]]; then
              REMOTE_TAG="sha-${REMOTE_SHA:0:12}"
            fi
          fi
          if [[ -z "$REMOTE_TAG" ]]; then
            echo "无法获取上游版本号，终止。"
            exit 1
          fi
          echo "REMOTE_TAG=$REMOTE_TAG" | tee -a $GITHUB_OUTPUT

      - name: 解析 app.json、列出插件清单并预校验
        id: appslist
        shell: bash
        run: |
          set -euo pipefail
          echo "== 校验 app.json 格式 =="
          jq empty erpnext15/app.json

          echo "== 插件清单（url / branch） =="
          jq -r '.[] | "- " + (.url|tostring) + " @ " + (.branch|tostring)' erpnext15/app.json

          echo "== Base64 编码并回显解码验证 =="
          B64="$(base64 -w 0 erpnext15/app.json)"
          echo "$B64" | base64 -d > apps-test-output.json
          echo "apps-test-output.json 内容摘要："
          jq -r '.[] | {url,branch}' apps-test-output.json

          echo "APPS_JSON_BASE64=$B64" >> $GITHUB_OUTPUT

          echo "== 逐个仓库连通性检测（仅公开仓库会成功；私有需 PAT） =="
          urls=($(jq -r '.[].url' erpnext15/app.json))
          for u in "${urls[@]}"; do
            masked="${u}"
            [[ "$u" == *"@"* ]] && masked="$(echo "$u" | sed 's#://[^@]*@#://***@#')"
            echo "→ 检测 $masked"
            if git ls-remote --heads --tags "$u" >/dev/null 2>&1; then
              echo "  OK"
            else
              echo "  ⚠️ 连接失败（可能是私有仓库或 URL/分支错误）。如为私有，需要在 URL 注入 PAT。"
            fi
          done

      - name: 决策：是否需要构建
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          FORCE_UPDATE="${{ steps.localcfg.outputs.FORCE_UPDATE }}"
          LOCAL_VERSION="${{ steps.localcfg.outputs.LOCAL_VERSION }}"
          REMOTE_TAG="${{ steps.upstream.outputs.REMOTE_TAG }}"
          SHOULD_BUILD="true"
          if [[ "$LOCAL_VERSION" == "$REMOTE_TAG" ]]; then
            if [[ "$FORCE_UPDATE" == "true" ]]; then
              SHOULD_BUILD="true"
              REASON="版本一致但 FORCE_UPDATE=true，执行构建。"
            else
              SHOULD_BUILD="false"
              REASON="版本一致且 FORCE_UPDATE=false，跳过构建。"
            fi
          else
            SHOULD_BUILD="true"
            REASON="版本不一致（本地: ${LOCAL_VERSION} / 上游: ${REMOTE_TAG}），执行构建。"
          fi
          echo "SHOULD_BUILD=$SHOULD_BUILD" | tee -a $GITHUB_OUTPUT
          echo "DECISION_REASON=$REASON" | tee -a $GITHUB_OUTPUT
          echo "::notice title=构建决策::${REASON}"

      - name: 若跳过则结束
        if: ${{ steps.decide.outputs.SHOULD_BUILD == 'false' && (github.event_name != 'workflow_dispatch') }}
        run: echo "跳过构建（非手动触发）。"

      - name: 计算镜像 TAG 与平台
        if: ${{ steps.decide.outputs.SHOULD_BUILD == 'true' || github.event_name == 'workflow_dispatch' }}
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          REMOTE_TAG="${{ steps.upstream.outputs.REMOTE_TAG }}"
          INPUT_TAG="${{ github.event.inputs.tag || '' }}"
          PLATFORMS="${{ github.event.inputs.platforms || '' }}"
          [[ -z "$PLATFORMS" ]] && PLATFORMS="linux/amd64,linux/arm64"
          FINAL_TAG="$REMOTE_TAG"
          [[ -n "$INPUT_TAG" ]] && FINAL_TAG="$INPUT_TAG"
          echo "FINAL_TAG=$FINAL_TAG" | tee -a $GITHUB_OUTPUT
          echo "PLATFORMS=$PLATFORMS" | tee -a $GITHUB_OUTPUT
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$FINAL_TAG" | tee -a $GITHUB_OUTPUT
          echo "::notice title=镜像标签::${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$FINAL_TAG"

      - name: Quick check 上游 frappe_docker 可达性
        if: ${{ steps.decide.outputs.SHOULD_BUILD == 'true' || github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          set -euo pipefail
          if ! git ls-remote https://github.com/frappe/frappe_docker.git >/dev/null 2>&1; then
            echo "无法访问 frappe/frappe_docker 仓库，请检查 GitHub 网络连通性。"
            exit 1
          fi
          echo "frappe_docker 仓库可访问。"

      - name: 设置 Buildx
        if: ${{ steps.decide.outputs.SHOULD_BUILD == 'true' || github.event_name == 'workflow_dispatch' }}
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送（layered Containerfile）
        if: ${{ steps.decide.outputs.SHOULD_BUILD == 'true' || github.event_name == 'workflow_dispatch' }}
        uses: docker/build-push-action@v6
        with:
          context: https://github.com/frappe/frappe_docker.git#main
          file: images/layered/Containerfile
          push: true
          platforms: ${{ steps.meta.outputs.PLATFORMS }}
          build-args: |
            FRAPPE_PATH=${{ env.FRAPPE_PATH }}
            FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH }}
            APPS_JSON_BASE64=${{ steps.appslist.outputs.APPS_JSON_BASE64 }}
          tags: |
            ${{ steps.meta.outputs.IMAGE }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-v15
          provenance: false
          no-cache: false
          sbom: false
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: 构建结果 / 常见问题提示
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          echo "================ 构建结果/排错提示 ================"
          echo "1) 若失败并出现 bench init 相关报错，常见原因："
          echo "   - app.json 无效（逗号/引号/尾逗号）→ 本流程已用 jq 校验；"
          echo "   - 私有仓库 URL 未注入 PAT（app.json url 需形如 https://<PAT>@host/owner/repo.git）；"
          echo "   - 分支名错误或仓库不存在；"
          echo "   - 上游依赖版本不兼容（可尝试改用 images/custom/Containerfile 并指定 PYTHON/NODE）；"
          echo "2) 若网络原因导致 git 克隆失败，可重试或改为企业镜像代理。"
          echo "3) 若 Print Designer 分支兼容性问题，可改为 branch: develop 或去掉该条目测试。"
          echo "==================================================="
