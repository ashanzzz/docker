name: ERPNext v15 镜像构建（对齐上游标签 & 可选强制更新）

on:
  push:
    paths:
      - "erpnext15/**"
      - ".github/workflows/erpnext15-build.yml"
      - ".github/workflows/build-erpnext15.yml"   # ← 新增：该文件被修改也触发
  workflow_dispatch:
    inputs:
      force_update:
        description: "强制更新（勾选则即使版本一致也构建）"
        type: boolean
        required: false
        default: false
  schedule:
    - cron: "20 3 * * *"  # 每天 03:20 UTC 定时检查

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/erpnext15
  FRAPPE_PATH: https://github.com/frappe/frappe
  FRAPPE_BRANCH: version-15

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: erpnext15-build
      cancel-in-progress: true

    steps:
      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 安装 jq / git
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq git

      - name: 登录 GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 检查输入目录/文件
        id: ckdir
        shell: bash
        run: |
          set -euo pipefail
          if [[ ! -d "erpnext15" ]]; then
            echo "::notice title=跳过构建::未检测到 erpnext15 目录。当前无 ERPNext 镜像构建输入。"
            echo "HAS_DIR=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "HAS_DIR=true" >> $GITHUB_OUTPUT
          if [[ ! -f "erpnext15/app.json" ]]; then
            echo "::notice title=跳过构建::缺少 erpnext15/app.json。当前无 ERPNext 镜像构建输入。"
            echo "HAS_APP_JSON=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "HAS_APP_JSON=true" >> $GITHUB_OUTPUT

      - name: 读取“强制更新”勾选
        id: flags
        shell: bash
        run: |
          set -euo pipefail
          FORCE="${{ github.event.inputs.force_update || 'false' }}"
          # 兼容旧 Runner（字符串化布尔），统一小写
          FORCE="$(echo "$FORCE" | tr 'A-Z' 'a-z')"
          echo "FORCE_UPDATE=$FORCE" | tee -a $GITHUB_OUTPUT

      - name: 获取上游 ERPNext v15 最新 tag（多重兜底）
        id: upstream
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          UPSTREAM_REPO="frappe/erpnext"
          REMOTE_TAG=""
          echo "== GitHub API: 拉取 v15.* tags =="
          RESP="$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" \
            "https://api.github.com/repos/${UPSTREAM_REPO}/tags?per_page=200" || true)"
          if [[ -n "$RESP" ]]; then
            REMOTE_TAG="$(echo "$RESP" | jq -r '.[].name' | grep -E '^v15\.' | sort -V | tail -n1 || true)"
          fi
          if [[ -z "$REMOTE_TAG" ]]; then
            echo "== 兜底：git ls-remote --tags =="
            REMOTE_TAG="$(git ls-remote --tags https://github.com/${UPSTREAM_REPO}.git | \
              awk '{print $2}' | sed 's#refs/tags/##' | sed 's/\^{}//' | grep -E '^v15\.' | sort -V | tail -n1 || true)"
          fi
          if [[ -z "$REMOTE_TAG" ]]; then
            echo "== 兜底2：取 version-15 分支最新提交 SHA =="
            SHA="$(git ls-remote https://github.com/${UPSTREAM_REPO}.git refs/heads/version-15 | awk '{print $1}' | head -n1 || true)"
            [[ -n "$SHA" ]] && REMOTE_TAG="sha-${SHA:0:12}"
          fi
          [[ -z "$REMOTE_TAG" ]] && { echo "无法获取上游版本号，终止。"; exit 1; }
          echo "REMOTE_TAG=$REMOTE_TAG" | tee -a $GITHUB_OUTPUT

      - name: 展示 app.json 插件清单 & 预校验
        id: apps
        shell: bash
        run: |
          set -euo pipefail
          echo "== 校验 app.json =="
          jq empty erpnext15/app.json
          echo "== 插件清单（url @ branch） =="
          jq -r '.[] | "- " + (.url|tostring) + " @ " + (.branch|tostring)' erpnext15/app.json
          echo "== Base64 编码回显验证 =="
          B64="$(base64 -w 0 erpnext15/app.json)"
          echo "$B64" | base64 -d > apps-test-output.json
          jq -r '.[] | {url,branch}' apps-test-output.json >/dev/null
          echo "APPS_JSON_BASE64=$B64" >> $GITHUB_OUTPUT
          echo "== 逐个仓库连通性检测（公开 OK；私有需带 PAT） =="
          mapfile -t urls < <(jq -r '.[].url' erpnext15/app.json)
          for u in "${urls[@]}"; do
            show="$u"; [[ "$u" == *"@"* ]] && show="$(echo "$u" | sed 's#://[^@]*@#://***@#')"
            echo "→ $show"
            if git ls-remote --heads --tags "$u" >/dev/null 2>&1; then
              echo "  OK"
            else
              echo "  ⚠️ 连接失败（可能私有或分支错误），若为私有请在 URL 注入 PAT。"
            fi
          done

      - name: 决策：是否需要构建
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          FORCE_UPDATE="${{ steps.flags.outputs.FORCE_UPDATE }}"
          REMOTE_TAG="${{ steps.upstream.outputs.REMOTE_TAG }}"
          # 本流程不再依赖本地版本号：镜像 tag 恒对齐 REMOTE_TAG
          SHOULD_BUILD="true"
          REASON="镜像标签将对齐上游：${REMOTE_TAG}"
          # 若不强制，可加一个“最近一次构建是否已有该 tag”的判断（可选）
          echo "SHOULD_BUILD=$SHOULD_BUILD" | tee -a $GITHUB_OUTPUT
          echo "DECISION_REASON=$REASON"    | tee -a $GITHUB_OUTPUT
          echo "::notice title=构建决策::${REASON}；强制更新=${FORCE_UPDATE}"

      - name: 计算镜像标签/平台（固定与上游一致）
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          FINAL_TAG="${{ steps.upstream.outputs.REMOTE_TAG }}"
          PLATFORMS="linux/amd64,linux/arm64"
          echo "FINAL_TAG=$FINAL_TAG"   | tee -a $GITHUB_OUTPUT
          echo "PLATFORMS=$PLATFORMS"   | tee -a $GITHUB_OUTPUT
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$FINAL_TAG" | tee -a $GITHUB_OUTPUT
          echo "::notice title=镜像标签::${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$FINAL_TAG"

      - name: Quick check 上游 frappe_docker 可达性
        shell: bash
        run: |
          set -euo pipefail
          git ls-remote https://github.com/frappe/frappe_docker.git >/dev/null \
            && echo "frappe_docker 仓库可访问。" \
            || { echo "无法访问 frappe_docker 仓库，请检查网络。"; exit 1; }

      - name: 设置 Buildx
        uses: docker/setup-buildx-action@v3

      - name: 构建并推送（images/layered/Containerfile + APPS_JSON_BASE64）
        uses: docker/build-push-action@v6
        with:
          context: https://github.com/frappe/frappe_docker.git#main
          file: images/layered/Containerfile
          push: true
          platforms: ${{ steps.meta.outputs.PLATFORMS }}
          build-args: |
            FRAPPE_PATH=${{ env.FRAPPE_PATH }}
            FRAPPE_BRANCH=${{ env.FRAPPE_BRANCH }}
            APPS_JSON_BASE64=${{ steps.apps.outputs.APPS_JSON_BASE64 }}
          tags: |
            ${{ steps.meta.outputs.IMAGE }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-v15
          provenance: false
          no-cache: ${{ fromJSON(steps.flags.outputs.FORCE_UPDATE == 'true' && 'true' || 'false') }}
          sbom: false
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to:   type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: 构建结果 / 常见问题提示
        if: ${{ always() }}
        shell: bash
        run: |
          set -euo pipefail
          echo "================ 构建结果/排错提示 ================"
          echo "• 若 bench init 报错：多半是私有仓库未带 PAT、分支不存在、或 app.json 语法问题。"
          echo "• Print Designer 仅兼容 develop/v15，若安装冲突改用 develop 或临时移除。"
          echo "• 官方做法：通过 APPS_JSON_BASE64 作为 build-arg，在 layered Containerfile 中 bench init --apps_path。"
          echo "  参考：frappe/frappe_docker 文档与仓库。"
          echo "==================================================="
