name: Build ERPNext 15 (All-in-One) to GHCR

on:
  schedule:
    - cron: "0 0 * * 1"
  workflow_dispatch:
    inputs:
      force_build:
        description: "是否强制构建并覆盖同版本镜像（true/false）"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]
      frappe_branch:
        description: "临时指定 frappe 分支（留空则用文件或默认 version-15）"
        required: false
        type: string
      erpnext_branch:
        description: "临时指定 erpnext 分支（留空则用文件或默认 version-15）"
        required: false
        type: string

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/erpnext15
  # 默认分支（与原脚本保持一致）
  FRAPPE_BRANCH_DEFAULT: version-15
  ERPNEXT_BRANCH_DEFAULT: version-15

jobs:
  check:
    name: Decide if build is needed
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.decide.outputs.should_build }}
      version_key:  ${{ steps.version.outputs.version_key }}
      # 传给下个 job 的动态路径 & 分支/哈希信息
      workdir: ${{ steps.detect.outputs.workdir }}
      dockerfile_path: ${{ steps.detect.outputs.dockerfile_path }}
      last_version_file: ${{ steps.detect.outputs.last_version_file }}
      frappe_branch_file: ${{ steps.detect.outputs.frappe_branch_file }}
      erpnext_branch_file: ${{ steps.detect.outputs.erpnext_branch_file }}
      frappe_branch: ${{ steps.branches.outputs.frappe_branch }}
      erpnext_branch: ${{ steps.branches.outputs.erpnext_branch }}
      frappe_sha: ${{ steps.fetch.outputs.frappe_sha }}
      erpnext_sha: ${{ steps.fetch.outputs.erpnext_sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Detect paths (docker/erpnext15 or erpnext15 at repo root)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${{ github.workspace }}"
          if [ -d "$ROOT/docker/erpnext15" ]; then
            WD="docker/erpnext15"
          elif [ -d "$ROOT/erpnext15" ]; then
            WD="erpnext15"
          else
            echo "❌ Neither $ROOT/docker/erpnext15 nor $ROOT/erpnext15 exists."
            echo "   当前仓库结构："; ls -la "$ROOT"
            exit 1
          fi
          echo "✅ Using workdir: $WD"
          echo "workdir=$WD" >> "$GITHUB_OUTPUT"
          echo "dockerfile_path=$ROOT/$WD/Dockerfile" >> "$GITHUB_OUTPUT"
          echo "frappe_branch_file=$ROOT/$WD/.frappe_branch" >> "$GITHUB_OUTPUT"
          echo "erpnext_branch_file=$ROOT/$WD/.erpnext_branch" >> "$GITHUB_OUTPUT"
          echo "last_version_file=$ROOT/$WD/.last_version" >> "$GITHUB_OUTPUT"

      - name: Show structure
        shell: bash
        run: |
          echo "Repo root:"
          ls -la
          echo "Chosen workdir: ${{ steps.detect.outputs.workdir }}"
          ls -la "${{ steps.detect.outputs.workdir }}"

      - name: Verify Dockerfile exists
        shell: bash
        run: |
          test -f "${{ steps.detect.outputs.dockerfile_path }}" || (echo "Dockerfile not found at ${{ steps.detect.outputs.dockerfile_path }}" && exit 1)

      - name: Resolve branches (inputs > file > default)
        id: branches
        shell: bash
        run: |
          set -euo pipefail
          FRAPPE_INPUT="${{ github.event.inputs.frappe_branch || '' }}"
          ERPNEXT_INPUT="${{ github.event.inputs.erpnext_branch || '' }}"

          FRAPPE_FILE_VAL=""
          ERPNEXT_FILE_VAL=""
          if [[ -f "${{ steps.detect.outputs.frappe_branch_file }}" ]]; then
            FRAPPE_FILE_VAL="$(cat "${{ steps.detect.outputs.frappe_branch_file }}" | tr -d ' \t\r\n')"
          fi
          if [[ -f "${{ steps.detect.outputs.erpnext_branch_file }}" ]]; then
            ERPNEXT_FILE_VAL="$(cat "${{ steps.detect.outputs.erpnext_branch_file }}" | tr -d ' \t\r\n')"
          fi

          FRAPPE_DEF="${{ env.FRAPPE_BRANCH_DEFAULT }}"
          ERPNEXT_DEF="${{ env.ERPNEXT_BRANCH_DEFAULT }}"

          FRAPPE_BRANCH="${FRAPPE_INPUT:-${FRAPPE_FILE_VAL:-$FRAPPE_DEF}}"
          ERPNEXT_BRANCH="${ERPNEXT_INPUT:-${ERPNEXT_FILE_VAL:-$ERPNEXT_DEF}}"

          echo "Use frappe branch: ${FRAPPE_BRANCH}"
          echo "Use erpnext branch: ${ERPNEXT_BRANCH}"

          echo "frappe_branch=${FRAPPE_BRANCH}" >> "$GITHUB_OUTPUT"
          echo "erpnext_branch=${ERPNEXT_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Fetch latest upstream SHAs (frappe & erpnext)
        id: fetch
        shell: bash
        run: |
          set -euo pipefail
          FRAPPE_BRANCH="${{ steps.branches.outputs.frappe_branch }}"
          ERPNEXT_BRANCH="${{ steps.branches.outputs.erpnext_branch }}"

          get_sha () {
            local repo="$1"; local branch="$2"
            curl -fsSL "https://api.github.com/repos/${repo}/commits?sha=${branch}&per_page=1" \
              | jq -r '.[0].sha' 2>/dev/null || true
          }

          FRAPPE_SHA="$(get_sha 'frappe/frappe' "${FRAPPE_BRANCH}")"
          ERPNEXT_SHA="$(get_sha 'frappe/erpnext' "${ERPNEXT_BRANCH}")"

          [[ -n "${FRAPPE_SHA}" && "${FRAPPE_SHA}" != "null" ]] || FRAPPE_SHA="ffffffffffffffffffffffffffffffffffffffff"
          [[ -n "${ERPNEXT_SHA}" && "${ERPNEXT_SHA}" != "null" ]] || ERPNEXT_SHA="eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"

          echo "frappe_sha=${FRAPPE_SHA}"   >> "$GITHUB_OUTPUT"
          echo "erpnext_sha=${ERPNEXT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Compute version key (double lock)
        id: version
        shell: bash
        run: |
          set -euo pipefail
          short () { echo "${1}" | cut -c1-7; }

          FRAPPE_SHA="${{ steps.fetch.outputs.frappe_sha }}"
          ERPNEXT_SHA="${{ steps.fetch.outputs.erpnext_sha }}"

          DF_SHA="$(sha256sum "${{ steps.detect.outputs.dockerfile_path }}" | cut -c1-8)"
          INST_SHA="none"
          if [[ -f "${{ steps.detect.outputs.workdir }}/installdata/install-erpnext15.sh" ]]; then
            INST_SHA="$(sha256sum "${{ steps.detect.outputs.workdir }}/installdata/install-erpnext15.sh" | cut -c1-8)"
          fi

          FRAPPE_BRANCH="${{ steps.branches.outputs.frappe_branch }}"
          ERPNEXT_BRANCH="${{ steps.branches.outputs.erpnext_branch }}"

          VERSION_KEY="frappe-${FRAPPE_BRANCH}@$(short "$FRAPPE_SHA")__erpnext-${ERPNEXT_BRANCH}@$(short "$ERPNEXT_SHA")__df-${DF_SHA}__inst-${INST_SHA}"
          echo "VERSION_KEY=${VERSION_KEY}"
          echo "version_key=${VERSION_KEY}" >> "$GITHUB_OUTPUT"

      - name: Read last_version & decide
        id: decide
        shell: bash
        run: |
          set -euo pipefail
          FORCE="${{ github.event.inputs.force_build || 'false' }}"
          VERSION_KEY="${{ steps.version.outputs.version_key }}"
          LAST_FILE="${{ steps.detect.outputs.last_version_file }}"

          CUR="none"
          if [[ -f "${LAST_FILE}" ]]; then
            CUR="$(cat "${LAST_FILE}" | tr -d '\r\n')"
          fi

          echo "Recorded: ${CUR}"
          echo "Candidate: ${VERSION_KEY}"

          if [[ "${FORCE}" == "true" ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          elif [[ "${CUR}" != "${VERSION_KEY}" ]]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build & Push
    needs: check
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.check.outputs.version_key }}
            type=raw,value=frappe-${{ needs.check.outputs.frappe_branch }}
            type=raw,value=erpnext-${{ needs.check.outputs.erpnext_branch }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.title=ERPNext 15 All-in-One
            org.opencontainers.image.description=All-in-one image with pinned SHAs
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ needs.check.outputs.version_key }}

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ${{ needs.check.outputs.workdir }}
          file: ${{ needs.check.outputs.dockerfile_path }}
          push: true
          platforms: linux/amd64,linux/arm64
          no
